<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="6" ignored="0" total="30" passed="24">
  <reporter-output>
  </reporter-output>
  <suite name="Calculator" duration-ms="170" started-at="2017-12-18T09:41:27Z" finished-at="2017-12-18T09:41:27Z">
    <groups>
      <group name="trigonometry">
        <method signature="CtgDoubleTest.ctgFromValue(double, double)[pri:0, instance:test.testng.CtgDoubleTest@6d00a15d]" name="ctgFromValue" class="test.testng.CtgDoubleTest"/>
        <method signature="SinDoubleTest.sinFromValue(double, double)[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="sinFromValue" class="test.testng.SinDoubleTest"/>
        <method signature="SqrtDoubleTest.sqrtFromValue(double, double)[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="sqrtFromValue" class="test.testng.SqrtDoubleTest"/>
      </group> <!-- trigonometry -->
      <group name="arithmetic">
        <method signature="DivLongTest.checkDivisionByZeroThrowsException()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="checkDivisionByZeroThrowsException" class="test.testng.DivLongTest"/>
        <method signature="DivLongTest.oneValueDivAnother(long, long, double)[pri:0, instance:test.testng.DivLongTest@51efea79]" name="oneValueDivAnother" class="test.testng.DivLongTest"/>
        <method signature="MultDoubleTest.oneValueMultAnother(double, double, double)[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="oneValueMultAnother" class="test.testng.MultDoubleTest"/>
        <method signature="SubDoubleTest.oneValueMinusAnother(double, double, double)[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="oneValueMinusAnother" class="test.testng.SubDoubleTest"/>
        <method signature="SumLongTest.oneValuePlusAnother(long, long, long)[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="oneValuePlusAnother" class="test.testng.SumLongTest"/>
      </group> <!-- arithmetic -->
      <group name="logic">
        <method signature="NegativeLongTest.NegativeValueCheck(long, boolean)[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="NegativeValueCheck" class="test.testng.NegativeLongTest"/>
      </group> <!-- logic -->
    </groups>
    <test name="lalalal" duration-ms="170" started-at="2017-12-18T09:41:27Z" finished-at="2017-12-18T09:41:27Z">
      <class name="test.testng.SinDoubleTest">
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="showStartTestTime" is-config="true" duration-ms="16" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
        <test-method status="PASS" signature="sinFromValue(double, double)[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="sinFromValue" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sinDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinFromValue -->
        <test-method status="PASS" signature="sinFromValue(double, double)[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="sinFromValue" duration-ms="1" started-at="2017-12-18T12:41:27Z" data-provider="sinDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.841]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinFromValue -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="1" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="showStartTestTime" is-config="true" duration-ms="2" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="sinFromValue(double, double)[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="sinFromValue" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sinDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.506]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinFromValue -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.SinDoubleTest@51081592]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
      </class> <!-- test.testng.SinDoubleTest -->
      <class name="test.testng.MultDoubleTest">
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="FAIL" signature="oneValueMultAnother(double, double, double)[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="oneValueMultAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="multDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2.5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5.7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[14.25]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [14.25] but found [14.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [14.25] but found [14.0]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEqualsImpl(Assert.java:134)
	at org.testng.Assert.assertEquals(Assert.java:115)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at test.testng.MultDoubleTest.oneValueMultAnother(MultDoubleTest.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMultAnother -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
        <test-method status="PASS" signature="oneValueMultAnother(double, double, double)[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="oneValueMultAnother" duration-ms="32" started-at="2017-12-18T12:41:27Z" data-provider="multDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-54.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMultAnother -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="FAIL" signature="oneValueMultAnother(double, double, double)[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="oneValueMultAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="multDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.35]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [0.35] but found [0.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [0.35] but found [0.0]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEqualsImpl(Assert.java:134)
	at org.testng.Assert.assertEquals(Assert.java:115)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at test.testng.MultDoubleTest.oneValueMultAnother(MultDoubleTest.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMultAnother -->
        <test-method status="PASS" signature="oneValueMultAnother(double, double, double)[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="oneValueMultAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="multDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMultAnother -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.MultDoubleTest@5034c75a]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
      </class> <!-- test.testng.MultDoubleTest -->
      <class name="test.testng.SqrtDoubleTest">
        <test-method status="PASS" signature="sqrtFromValue(double, double)[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="sqrtFromValue" duration-ms="16" started-at="2017-12-18T12:41:27Z" data-provider="sqrtDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtFromValue -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
        <test-method status="PASS" signature="sqrtFromValue(double, double)[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="sqrtFromValue" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sqrtDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtFromValue -->
        <test-method status="FAIL" signature="sqrtFromValue(double, double)[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="sqrtFromValue" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sqrtDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[NaN]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [NaN] but found [10.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [NaN] but found [10.0]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEquals(Assert.java:221)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at test.testng.SqrtDoubleTest.sqrtFromValue(SqrtDoubleTest.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtFromValue -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="sqrtFromValue(double, double)[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="sqrtFromValue" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sqrtDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.09]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtFromValue -->
        <test-method status="PASS" signature="sqrtFromValue(double, double)[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="sqrtFromValue" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sqrtDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.632]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtFromValue -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.SqrtDoubleTest@7f9a81e8]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
      </class> <!-- test.testng.SqrtDoubleTest -->
      <class name="test.testng.SubDoubleTest">
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="oneValueMinusAnother(double, double, double)[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="oneValueMinusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="subDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-15.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMinusAnother -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="oneValueMinusAnother(double, double, double)[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="oneValueMinusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="subDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMinusAnother -->
        <test-method status="PASS" signature="oneValueMinusAnother(double, double, double)[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="oneValueMinusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="subDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-10.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMinusAnother -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="oneValueMinusAnother(double, double, double)[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="oneValueMinusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="subDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[15.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMinusAnother -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="oneValueMinusAnother(double, double, double)[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="oneValueMinusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="subDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.05]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.651123456]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-0.601123456]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueMinusAnother -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.SubDoubleTest@9629756]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
      </class> <!-- test.testng.SubDoubleTest -->
      <class name="test.testng.SumLongTest">
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="oneValuePlusAnother(long, long, long)[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="oneValuePlusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sumDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[35]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValuePlusAnother -->
        <test-method status="PASS" signature="oneValuePlusAnother(long, long, long)[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="oneValuePlusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sumDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValuePlusAnother -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="oneValuePlusAnother(long, long, long)[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="oneValuePlusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sumDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValuePlusAnother -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="oneValuePlusAnother(long, long, long)[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="oneValuePlusAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="sumDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValuePlusAnother -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.SumLongTest@62ee68d8]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
      </class> <!-- test.testng.SumLongTest -->
      <class name="test.testng.CtgDoubleTest">
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.CtgDoubleTest@6d00a15d]" name="showStartTestTime" is-config="true" duration-ms="22" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.CtgDoubleTest@6d00a15d]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.CtgDoubleTest@6d00a15d]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.CtgDoubleTest@6d00a15d]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="FAIL" signature="ctgFromValue(double, double)[pri:0, instance:test.testng.CtgDoubleTest@6d00a15d]" name="ctgFromValue" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="ctgDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.642]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [0.642] but found [0.7615941559557649]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [0.642] but found [0.7615941559557649]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEquals(Assert.java:225)
	at org.testng.Assert.assertEquals(Assert.java:238)
	at test.testng.CtgDoubleTest.ctgFromValue(CtgDoubleTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ctgFromValue -->
      </class> <!-- test.testng.CtgDoubleTest -->
      <class name="test.testng.NegativeLongTest">
        <test-method status="PASS" signature="NegativeValueCheck(long, boolean)[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="NegativeValueCheck" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="isNegativeDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NegativeValueCheck -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="NegativeValueCheck(long, boolean)[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="NegativeValueCheck" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="isNegativeDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NegativeValueCheck -->
        <test-method status="PASS" signature="NegativeValueCheck(long, boolean)[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="NegativeValueCheck" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="isNegativeDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NegativeValueCheck -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.NegativeLongTest@396a51ab]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
      </class> <!-- test.testng.NegativeLongTest -->
      <class name="test.testng.DivLongTest">
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showStartTestTime" is-config="true" duration-ms="16" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="createCalc()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="createCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCalc -->
        <test-method status="FAIL" signature="oneValueDivAnother(long, long, double)[pri:0, instance:test.testng.DivLongTest@51efea79]" name="oneValueDivAnother" duration-ms="15" started-at="2017-12-18T12:41:27Z" data-provider="divDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1.5]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Invalid result of operation expected [-1.5] but found [-1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Invalid result of operation expected [-1.5] but found [-1.0]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEqualsImpl(Assert.java:134)
	at org.testng.Assert.assertEquals(Assert.java:115)
	at test.testng.DivLongTest.oneValueDivAnother(DivLongTest.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueDivAnother -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="oneValueDivAnother(long, long, double)[pri:0, instance:test.testng.DivLongTest@51efea79]" name="oneValueDivAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="divDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueDivAnother -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="checkDivisionByZeroThrowsException()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="checkDivisionByZeroThrowsException" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Attempt to divide by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Attempt to divide by zero
	at com.epam.tat.module4.Calculator.div(Calculator.java:34)
	at test.testng.DivLongTest.checkDivisionByZeroThrowsException(DivLongTest.java:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkDivisionByZeroThrowsException -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
        <test-method status="FAIL" signature="oneValueDivAnother(long, long, double)[pri:0, instance:test.testng.DivLongTest@51efea79]" name="oneValueDivAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="divDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Invalid result of operation expected [0.1] but found [0.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Invalid result of operation expected [0.1] but found [0.0]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEqualsImpl(Assert.java:134)
	at org.testng.Assert.assertEquals(Assert.java:115)
	at test.testng.DivLongTest.oneValueDivAnother(DivLongTest.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueDivAnother -->
        <test-method status="PASS" signature="showStartTestTime()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showStartTestTime" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showStartTestTime -->
        <test-method status="PASS" signature="destroyCalc()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="destroyCalc" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyCalc -->
        <test-method status="PASS" signature="oneValueDivAnother(long, long, double)[pri:0, instance:test.testng.DivLongTest@51efea79]" name="oneValueDivAnother" duration-ms="0" started-at="2017-12-18T12:41:27Z" data-provider="divDataProvider" finished-at="2017-12-18T12:41:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneValueDivAnother -->
        <test-method status="PASS" signature="showFinishTestTimeAndDuration()[pri:0, instance:test.testng.DivLongTest@51efea79]" name="showFinishTestTimeAndDuration" is-config="true" duration-ms="0" started-at="2017-12-18T12:41:27Z" finished-at="2017-12-18T12:41:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- showFinishTestTimeAndDuration -->
      </class> <!-- test.testng.DivLongTest -->
    </test> <!-- lalalal -->
  </suite> <!-- Calculator -->
</testng-results>
